// This is Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  family                String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  phone                 String?                @unique
  role                  Int                    @default(0)
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  loginTime             DateTime?
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  sessions              Session[]
  Authenticator         Authenticator[]
  progress              UserLetterProgress[] // پیشرفت کاربر در حروف و مراحل مختلف
  answers               UserAnswer[] // پاسخ‌های کاربر به سوالات
  tickets               Ticket[] 
  messages              TicketMessage[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@unique([email, phone])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}


// Department model
model Department {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   // e.g., Technical, Support, etc.
  tickets   Ticket[]
}

// Enum for Ticket Priority
enum TicketPriority {
  HIGH
  MEDIUM
  LOW
}

// Enum for Ticket Status
enum TicketStatus {
  WAITING_FOR_SUPPORT  // "منتظر پشتیبان"
  UNDER_REVIEW         // "درحال بررسی"
  WAITING_FOR_USER     // "منتظر کاربر"
  CLOSED               // "بسته شده"
}

// Model to store ticket number counter
model TicketCounter {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  sequence   Int    @default(0) // The current ticket number sequence
}

// Ticket model
model Ticket {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  ticketNumber  Int             
  userId        String          @db.ObjectId
  departmentId  String          @db.ObjectId
  priority      TicketPriority
  status        TicketStatus    @default(WAITING_FOR_SUPPORT)
  title         String
  lastUpdatedAt DateTime        @updatedAt
  messages      TicketMessage[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  department    Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt 
}

// TicketMessage model
model TicketMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  ticketId   String   @db.ObjectId
  senderId   String   @db.ObjectId  // References User (could be admin or user)
  message    String
  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt 
}

// Application-specific models

// Represents a letter in the alphabet
model Letter {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  name         String           // The letter (e.g., "پ")
  order        Int              // Order in the alphabet
  isUnlocked   Boolean          @default(false) // Whether the letter is unlocked
  syllables    Syllable[]       // Associated syllables
  words        Word[]           // Associated words
  sentences    Sentence[]       // Associated sentences
  bigStory     BigStory?        // Associated big story
  shortStories ShortStory[]     // Associated short stories
  exercises    Exercise[]       // Associated exercises
  progress     UserLetterProgress[] // User progress on this letter
  createdAt    DateTime         @default(now()) // Date letter was created
  updatedAt    DateTime         @updatedAt // Date letter was updated
}

// Represents a syllable associated with a letter
model Syllable {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  letterId  String   @db.ObjectId
  image     String   // Image showing pronunciation
  audio     String   // Audio of the syllable
  text      String   // Text with pronunciation marks
  letter    Letter   @relation(fields: [letterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) // Date word was created
  updatedAt DateTime @updatedAt // Date word was updated
}

// Enum for the position of a letter in a word
enum LetterPosition {
  INITIAL  // Letter at the beginning of the word
  MIDDLE   // Letter in the middle of the word
  END      // Letter at the end of the word
}

// Represents a word associated with a letter
model Word {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  letterId      String         @db.ObjectId
  image         String         // Image representing the word
  audio         String         // Audio of the word
  text          String         // The word text
  position      LetterPosition // Position of the letter in the word
  letter        Letter         @relation(fields: [letterId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now()) // Date word was created
  updatedAt     DateTime       @updatedAt // Date word was updated
}

// Represents a sentence associated with a letter
model Sentence {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  letterId      String         @db.ObjectId
  image         String         // Image representing the sentence
  audio         String         // Audio of the sentence
  text          String         // The sentence text
  position      LetterPosition // Position of the letter in key words
  letter        Letter         @relation(fields: [letterId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now()) // Date sentence was created
  updatedAt     DateTime       @updatedAt // Date sentence was updated
}

// Represents the big story associated with a letter
model BigStory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  letterId  String   @unique @db.ObjectId
  slides    Slide[]  // Slides in the big story
  letter    Letter   @relation(fields: [letterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) // Date big story was created
  updatedAt DateTime @updatedAt // Date big story was updated
}

// Represents a slide in a big story
model Slide {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bigStoryId String  @db.ObjectId
  image     String   // Background image of the slide
  audio     String   // Audio for the text
  text      String   // Text displayed on the slide
  order     Int      // Sequence order
  bigStory  BigStory @relation(fields: [bigStoryId], references: [id], onDelete: Cascade)
}

// Represents a short story associated with a letter
model ShortStory {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  letterId  String         @db.ObjectId
  position  LetterPosition // Position of the letter in key words
  image     String         // Image for the story
  audio     String         // Audio of the story
  text      String         // Story text
  letter    Letter         @relation(fields: [letterId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now()) // Date short story was created
  updatedAt DateTime       @updatedAt // Date short story was updated
}

// Enum for different types of exercises
enum ExerciseType {
  TYPE_ONE   // Placeholder for future exercises
  TYPE_TWO   // Exercise type two
  TYPE_THREE // Exercise type three
}

// Represents an exercise associated with a letter
model Exercise {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  letterId       String         @db.ObjectId
  type           ExerciseType   // Type of exercise
  questions      Question[]     // Questions in the exercise
  letter         Letter         @relation(fields: [letterId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now()) // Date exercise was created
  updatedAt      DateTime       @updatedAt // Date exercise was updated
}

// Represents a question in an exercise
model Question {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  exerciseId   String     @db.ObjectId
  questionText String     // Text of the question
  options      Option[]   // Options available
  correctAnswer String    // Correct answer
  audio        String?    // Audio for the question
  image        String?    // Image for the question
  exercise     Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  answers      UserAnswer[] // User answers to this question
}

// Represents an option for a question
model Option {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  questionId  String    @db.ObjectId
  text        String    // Option text
  audio       String?   // Audio for the option
  image       String?   // Image for the option
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  UserAnswer UserAnswer[]
}

// Enum for different learning stages
enum StageType {
  SYLLABLES       // Stage 1
  WORDS           // Stage 2
  SENTENCES       // Stage 3
  BIG_STORY       // Stage 4
  SHORT_STORIES   // Stage 5
  EXERCISES       // Stage 6
}

// Tracks user's progress on each letter and stage
model UserLetterProgress {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  letterId    String     @db.ObjectId
  stage       StageType  // Current stage
  isCompleted Boolean    @default(false) // Completion status
  completedAt DateTime?  // Completion timestamp
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  letter      Letter     @relation(fields: [letterId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now()) // Date progress record was created
  updatedAt   DateTime   @updatedAt // Date progress record was updated
}

// Records user's answers to questions
model UserAnswer {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  userId         String     @db.ObjectId
  questionId     String     @db.ObjectId
  selectedOptionId String?  @db.ObjectId // Chosen option
  isCorrect      Boolean    // Correctness of the answer
  answeredAt     DateTime   @default(now())
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  question       Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption Option?    @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  createdAt      DateTime   @default(now()) // Date answer record was created
  updatedAt      DateTime   @updatedAt // Date answer record was updated
}